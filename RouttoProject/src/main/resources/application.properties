spring.application.name=RouttoProject

# \uC11C\uBC84 \uD3EC\uD2B8 : \uAE30\uBCF8\uD3EC\uD2B8(8080) -> 8000(\uBCC0\uACBD)
server.port=8000
# \uC790\uBC14 \uC18C\uC2A4\uAC00 \uC218\uC815\uB418\uBA74 \uC11C\uBC84 \uC790\uB3D9 \uC7AC\uC2DC\uC791\uC744 \uD568
spring.devtools.restart.enabled=true

## TODO: DB \uB77C\uC774\uBE0C\uB7EC\uB9AC \uC124\uC815 : build.gradle \uC624\uB77C\uD074 db \uB77C\uC774\uBE0C\uB7EC\uB9AC \uC5C6\uC73C\uBA74 \uC5D0\uB7EC\uBC1C\uC0DD
#spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
## TODO: DB \uC811\uC18D \uC124\uC815  : \uB3C4\uCEE4 \uC624\uB77C\uD074 , \uACC4\uC815/\uC554\uD638, db\uBA85(\uC11C\uBE44\uC2A4\uC774\uB984)(xepdb1)
### todo: spring.datasource.url=jdbc:log4jdbc:oracle:thin:@ip\uC8FC\uC18C:db\uD3EC\uD2B8\uBC88\uD638/db\uC774\uB984
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@localhost:1521/xepdb1
## \uACC4\uC815 \uC815\uBCF4
#spring.datasource.username=scott
## \uC554\uD638
#spring.datasource.password=!Ds1234567890

# \uC624\uB77C\uD074 \uC124\uC815 ( \uC624\uB77C\uD074 \uD074\uB77C\uC6B0\uB4DC \uC804\uC790\uC9C0\uAC11 \uC124\uC815 ) : log4j \uC801\uC6A9
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
# jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=\uC804\uC790\uC9C0\uAC11\uACBD\uB85C
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=C:/Users/PC/Desktop/class_things/92_Wallet/Wallet_orcl/
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=C:/class_things/92_Wallet/Wallet_orcl/
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=C:/Users/PC/Desktop/team_project/oraclDb/Wallet_orcl/
spring.datasource.username=lotto
spring.datasource.password=!Ds1234567890

# DB\uC811\uC18D\uC218 \uC81C\uD55C : 1\uC0AC\uB78C\uB2F9 1\uAC1C
spring.datasource.hikari.minimumIdle=1
spring.datasource.hikari.maximumPoolSize=1
spring.datasource.hikari.poolName=HikariPoolBooks

# TODO: JPA \uC811\uC18D \uC124\uC815
# JPA : sql \uB97C \uC790\uB3D9 \uC0DD\uC131\uD574\uC8FC\uB294 \uD504\uB808\uC784\uC6CC\uD06C :
# => JPA \uAE30\uBCF8\uD568\uC218\uB9CC \uC2E4\uD589\uD558\uBA74 \uD574\uB2F9\uB418\uB294 sql \uBB38\uC744 \uB9CC\uB4E4\uC5B4\uC90C(\uC790\uB3D9\uD654\uAE30\uB2A5)
# => JPA \uBCF5\uC7A1\uD55C sql \uBB38\uC740 \uAC1C\uBC1C\uC790 \uC9C1\uC811 \uC791\uC131\uD558\uB294 \uAE30\uB2A5\uC774 \uC788\uC74C => Querydsl \uB77C\uC774\uBE0C\uB7EC\uB9AC
# vs Mybatis : \uBAA8\uB4E0 sql \uC744 \uAC1C\uBC1C\uC790 \uC9C1\uC811 \uC791\uC131\uD558\uB294 \uBC29\uC2DD, \uB300\uC2E0\uC5D0 \uC791\uC131\uC2DC \uAC00\uB3C5\uC131 \uB192\uC5EC\uC11C \uC791\uC131\uAC00\uB2A5

# JPA : sql \uC790\uB3D9\uC791\uC131 \uAE30\uB2A5 : 1) ddl (\uD14C\uC774\uBE14\uC0DD\uC131, \uC2DC\uD000\uC2A4 \uC0DD\uC131\uB4F1) \uC0DD\uC131           : x
#                         2) dml (CRUD:insert/select/update/delete) \uC0DD\uC131 : O
# ddl \uC790\uB3D9\uC0DD\uC131 \uAE30\uB2A5 \uCF1C\uAE30 \uC635\uC158 : none(\uB044\uAE30), create(\uCF1C\uAE30), update(\uC5C6\uB294\uAC83\uB9CC \uB9CC\uB4E4\uAE30)
spring.jpa.hibernate.ddl-auto=none
# todo: db \uC81C\uD488 \uC5F0\uACB0 ( oracle 12\uC774\uC0C1 : Oracle12cDialect )
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect

# batch size \uC124\uC815 : \uC5F0\uAD00\uAD00\uACC4 \uC124\uC815 \uC2DC N+1 \uBB38\uC81C \uCD5C\uC18C\uD654
#  \uC5EC\uB7EC \uAC1C\uC758 SELECT \uCFFC\uB9AC\uB4E4\uC744 \uD558\uB098\uC758 IN \uCFFC\uB9AC\uB85C \uB9CC\uB4E4\uC5B4\uC90D
spring.jpa.properties.hibernate.default_batch_fetch_size=1000

# TODO: \uC5C5\uB85C\uB4DC \uD30C\uC77C \uC0AC\uC774\uC988 \uC81C\uD55C \uC124\uC815 : \uAE30\uBCF8(1MB \uAE4C\uC9C0)
#  file upload size \uC124\uC815
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# todo : \uCE74\uD504\uCE74 \uC811\uC18D \uC124\uC815
# consumer bootstrap servers\uAC00 \uB530\uB85C \uC874\uC7AC\uD558\uBA74 \uC124\uC815
#spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.bootstrap-servers=kafka:9092

# \uC2DD\uBCC4 \uAC00\uB2A5\uD55C Consumer Group Id -> \uC18C\uBE44\uC790 \uADF8\uB8F9 \uC774\uB984 \uC124\uC815
spring.kafka.consumer.group-id=academy

#\uC624\uD504\uC14B -> \uC18C\uBE44\uC790\uAC00 \uC77D\uC740 \uBA54\uC138\uC9C0\uB97C \uD45C\uC2DC\uD574\uB450\uB294 \uAC83 -> \uC774\uAC78 \uD574\uC918\uC57C \uC911\uBCF5 \uC804\uC1A1\uC744 \uB9C9\uC744 \uC218 \uC788\uB2E4.
# \uC124\uC815 : earliest(\uC624\uB798\uB41C) / latest(\uCD5C\uADFC), \uCD5C\uCD08\uC124\uC815\uC774\uB098 \uAC11\uC790\uAE30 \uC7A5\uC560\uB4F1\uC758 \uC774\uC720\uB85C \uC0AC\uB77C\uC84C\uC744\uACBD\uC6B0 \uC124\uC815\uC744 \uD574\uC8FC\uC5B4\uC57C\uD55C\uB2E4.
spring.kafka.consumer.auto-offset-reset=earliest

# \uB370\uC774\uD130\uB97C \uBC1B\uC544\uC62C \uB54C, key/value \uB97C \uC5ED\uC9C1\uB82C\uD654 : json \uC5D0\uC11C (key, value) \uB85C  \uBCC0\uACBD\uC2DC \uBCC0\uD658 \uC124\uC815
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# producer bootstrap servers \uAC00 \uB530\uB85C \uC874\uC7AC\uD558\uBA74 \uC124\uC815 :(key, value) \uC5D0\uC11C json \uC73C\uB85C  \uBCC0\uACBD\uC2DC \uBCC0\uD658 \uC124\uC815
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# TODO: \uC6F9\uD1A0\uD070(JWT) \uC124\uC815 : \uBE44\uBC00\uD0A4, \uB9CC\uB8CC\uC2DC\uAC04(10\uBD84)
#  openssl rand -hex 64 : git bash \uB610\uB294 \uB9AC\uB205\uC2A4\uC5D0\uC11C \uC2E4\uD589\uD558\uBA74 \uB79C\uB364\uD55C 64 byte \uBE44\uBC00\uD0A4 \uC0DD\uC131\uB428
simpleDms.app.jwtSecret=bd1889daea6ad98b6e099034b0544974a17bab50c2872e3916c6c7d7762ce80fe9bc0a72ea5d62e65eb7e2396d6dcd1fb90937c7ead79adce142c8383de20776
# \uB9CC\uB8CC\uC2DC\uAC04 : \uBC00\uB9AC\uC138\uCEE8\uB4DC
# 10\uBD84
simpleDms.app.jwtExpirationMs= 600000